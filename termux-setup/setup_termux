#!/bin/bash

function failed
{
    echo "Failed. Aborting."
    echo ""
    exit 1
}


if [ -f "$HOME/.termux_setup_done" ];
then
    echo "Termux is already ready."
    echo ""
    exit 0
fi


BIN=$PREFIX/bin
TMP_DIR=$PREFIX/tmp

SCRIPTS_REPO=https://raw.githubusercontent.com/arithesage/termux_things
SCRIPTS_REPO=$SCRIPTS_REPO/refs/heads/main/termux-setup/scripts
SETUP_REPO=https://github.com/arithesage/termux_things.git




if ! [ -d "$HOME/storage" ];
then
    echo "Execute 'termux-setup-storage' first, to grant Termux access"
    echo "to the Android filesystem."
    echo ""
    echo "It is also recommended, if you have not done it yet, to"
    echo "execute 'termux-change-repo' for selecting a mirror for"
    echo "downloading the packages, although is not strictly necesary."
    echo ""
    exit 1
fi



echo "Performing a basic Termux setup..."
echo "=================================="


if ! [ -f "$HOME/.bashrc" ];
then
    cp "$PREFIX/etc/bash.bashrc" "$HOME/.bashrc"

    echo "sshd" >> "$HOME/.bashrc"

    echo "- Added basic .bashrc file"
fi


if ! [ -f "$HOME/.environment" ];
then
    touch "$HOME/.environment"
    echo "source $HOME/.environment" >> "$HOME/.bashrc"
    
    echo "- Added .environment file"
fi


if ! [ -f "$BIN/sshd" ] || ! [ -f "$BIN/wget" ];
then
    echo "- Proceeding with the installing of some packages..."
    echo ""

    pkg update

    echo ""
    echo "Installing packages ..."
    echo "======================="
    echo ""

    pkg install -y git neovim openssh rclone wget

    if ! [ "$?" == "0" ];
    then
        failed
    fi
fi


if ! [ -f "$HOME/scripts" ];
then
    echo ""
    echo "Installing some useful scripts..."
    echo "================================="
    echo ""

    git clone $SETUP_REPO "$PREFIX/tmp/termux_things" --depth=1

    if ! [ "$?" == "0" ];
    then
        echo "Could not clone the setup repo."
        failed
    fi

    cp -r "$TMP_DIR/termux_things/termux-setup/scripts" "$HOME/scripts"

#    mkdir "$HOME/scripts"

    SCRIPTS="$HOME/scripts"

    echo "export SCRIPTS=\"$HOME/scripts\"" >> "$HOME/.environment"
    echo "export PATH=\"$PATH:$SCRIPTS\"" >> "$HOME/.environment"

#    wget $SCRIPTS_REPO/enable_x11 -O "$SCRIPTS/enable_x11"
#    wget $SCRIPTS_REPO/find_extsd -O "$SCRIPTS/find_extsd"
#    wget $SCRIPTS_REPO/install_box86-64 -O "$SCRIPTS/install_box86-64"
#    wget $SCRIPTS_REPO/install_virgl -O "$SCRIPTS/install_virgl"
#    wget $SCRIPTS_REPO/install_wine -O "$SCRIPTS/install_wine"
#    wget $SCRIPTS_REPO/pexec -O "$SCRIPTS/pexec"
#    wget $SCRIPTS_REPO/proot_admin -O "$SCRIPTS/proot_admin"
#    wget $SCRIPTS_REPO/prun -O "$SCRIPTS/prun"
#    wget $SCRIPTS_REPO/prun_admin -O "$SCRIPTS/prun_admin"
#    wget $SCRIPTS_REPO/prun_x11 -O "$SCRIPTS/prun_x11"
#    wget $SCRIPTS_REPO/setup_proot -O "$SCRIPTS/setup_proot"

    chmod -R +x $SCRIPTS
fi


if ! [ -d "$HOME/storage/external-1" ];
then
    echo "No external SD card detected."
    echo "Skipping setting up extsd_id."
    echo ""

else
    if ! [ -f "$HOME/.extsd_id" ];
    then
        extsd_path=$(realpath "$HOME/storage/external-1")
        extsd_id=${extsd_path:9:9}

        echo $extsd_id > "$HOME/.extsd_id"
        echo "export EXT_SD=\"/storage/${extsd_id}\"" >> "$HOME/.environment"

        echo ""
        echo "- Added .extsd_id file with the SD card ID."
        echo "  Also, an EXT_SD variable has been added to .environment with its"
        echo "  full path (more confortable that writing '/storage/external-1')."
        echo ""
    fi
fi

echo "Basic setup done. Restart Termux before continuing."
echo "Enjoy Termux!"
echo ""

touch "$HOME/.termux_setup_done"

